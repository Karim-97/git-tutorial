diff --cc README.md
index 18b2c03,f3a9ba1..0000000
--- a/README.md
+++ b/README.md
@@@ -18,48 -18,46 +18,91 @@@ Unmerged paths
  Inside each conflict file Git places markers that indicate the area of conflict. Let's take the simple example where two changes affected the same line of code in a file. This means that Git needs you to decide which change to keep. You will manually need to edit the code to integrate both solutions into your project. Choosing how to fix your code will be up to your discretion.
  
  Now in this example I have branched my original code, then on the new branch **and** on my current branch created commits that modify the same line of code. On the current branch I added "Result:" to a `printf` statement while on the branch I added "Output:".
++<<<<<<< HEAD
 +
 +``` bash
 +Original code (shared commit) ------ + "Result:"
 +                              |----- + "Output:"
 +```
 +
 +This has caused a merge conflict as the commit which they both share now has two different diffs when compared with the HEAD of both branches.
 +
 +Looking into the file `src/main.c`, as shown by `git status`, we would see the following around the line of interest.
 +
 +``` C
 +<<<<<<< HEAD                                                                     
 +        printf("Result: %s", tmp);                                               
 +=======                                                                          
 +        printf("Output: %s", tmp);                                               
 +>>>>>>> bar      
 +```
 +
 +This tells use that on our current branch (our current HEAD) the line containing "Result", where as on the branch we wish to merge into our current branch (bar) the line contains "Output". Git does not know which one we wish to use and as such we must decide. Let's say that we wish the have the line contain output and not result, then we must manually delete the markers from Git as well as the line. Using our new patch knowledge we can see the what needs to be done below.
 +
 +``` bash
 +--- src/main.c	2019-03-20 11:47:22.947753390 +0100
 ++++ src/main.c	2019-03-20 11:47:34.777753931 +0100
 +@@ -8,11 +8,7 @@
 +     char *tmp = NULL;
 +     tmp = num_to_words(123);
 +     if (tmp)
 +-<<<<<<< HEAD
 +-        printf("Result: %s", tmp);
 +-=======
 +         printf("Output: %s", tmp);
 +->>>>>>> bar
 +     else
 +         return 1;
 +    return 0;
 +```
 +
 +Once you have resolved the merge conflict you can then add the resolved file and finalize the merge with a normal commit. The commit message should summarize the changes during the merge.
 +
 +Now that you has seen the basic ideas of how merging works, lets see if you can handle some more complex merge problem yourself. You will find a branch called "unknown_features" which has diverged from this current branch at the previous commit. Your job now is to merge this branch into this current branch and resolve the conflicts presented. The project is a self-contained CMake project inside the `merge_exercise` folder and you will need to apply you C knowledge and CMake knowledge to merge the files correctly to get the project building properly. Please note that there are other tricks and errors hidden in the code. The code should not complile with warnings as warnings should almost always be treated as errors. Warnings will be cause for deducted marks throughout this course. 
 +
 +The program should be a POSIX thread based state machine that counts to a number specified in the programs options. See the `--help` of the compiled binary to see how to use the program. Once your binary performs this then you have the project merged and building correctly. Merge the project into `merging` and finally into `master`, if both projects are stable and working as expected. Finally create another tag with the annotation "Exercise 1.2 Submission".
++=======
+ 
+ ``` bash
+ Original code (shared commit) ------ + "Result:"
+                               |----- + "Output:"
+ ```
+ 
+ This has caused a merge conflict as the commit which they both share now has two different diffs when compared with the HEAD of both branches.
+ 
+ Looking into the file `src/main.c`, as shown by `git status`, we would see the following around the line of interest.
+ 
+ ``` C
+ <<<<<<< HEAD                                                                     
+         printf("Result: %s", tmp);                                               
+ =======                                                                          
+         printf("Output: %s", tmp);                                               
+ >>>>>>> bar      
+ ```
+ 
+ This tells use that on our current branch (our current HEAD) the line containing "Result", where as on the branch we wish to merge into our current branch (bar) the line contains "Output". Git does not know which one we wish to use and as such we must decide. Let's say that we wish the have the line contain output and not result, then we must manually delete the markers from Git as well as the line. Using our new patch knowledge we can see the what needs to be done below.
+ 
+ ``` bash
+ --- src/main.c	2019-03-20 11:47:22.947753390 +0100
+ +++ src/main.c	2019-03-20 11:47:34.777753931 +0100
+ @@ -8,11 +8,7 @@
+      char *tmp = NULL;
+      tmp = num_to_words(123);
+      if (tmp)
+ -<<<<<<< HEAD
+ -        printf("Result: %s", tmp);
+ -=======
+          printf("Output: %s", tmp);
+ ->>>>>>> bar
+      else
+          return 1;
+     return 0;
+ ```
+ 
+ Once you have resolved the merge conflict you can then add the resolved file and finalize the merge with a normal commit. The commit message should summarize the changes during the merge.
+ 
+ Now that you has seen the basic ideas of how merging works, lets see if you can handle some more complex merge problem yourself. You will find a branch called "unknown_features" which has diverged from this current branch at the previous commit. Your job now is to merge this branch into this current branch and resolve the conflicts presented. The project is a self-contained CMake project inside the `merge_exercise` folder and you will need to apply you C knowledge and CMake knowledge to merge the files correctly to get the project building properly. Once you have the project merged and building, merge the project into `merging` and finally into `master`, if both projects are stable and working as expected. Finally create another tag with the annotation "Exercise 1.2 Submission".
++>>>>>>> unknown_features
  
  If all of that is done then you have completed this tutorial. Please be wary that the use of Git is a requirement in this course and will be part of the project's assessment. Inform yourself on proper use of Git commit messages and make sure that you and your team partner establish a Git workflow that you will use throughout the course. A fun tool to use to make sure your workflow has been used properly is `git log --graph --all` which will give you a graphical representation of your repo's logs.
  
diff --cc include/main.h
index d63dc1d,4981f46..0000000
--- a/include/main.h
+++ b/include/main.h
@@@ -43,8 -43,8 +43,13 @@@
  #define SECOND_STATE_NAME "Count up twice"
  #define THIRD_STATE_NAME "Count down once"
  
++<<<<<<< HEAD
 +#define NANOS_IN_SEC 1000000000
 +#define NANOS_IN_MSEC 10000000
++=======
+ #define NANOS_IN_SEC 100000000
+ #define NANOS_IN_MSEC 1000000
++>>>>>>> unknown_features
  #define MSEC_IN_NANO(MSEC) MSEC *NANOS_IN_MSEC
  
  #define DEFAULT_TICK 100
diff --cc src/main.c
index 1186700,c815c6e..0000000
--- a/src/main.c
+++ b/src/main.c
@@@ -51,13 -51,13 +51,21 @@@ static struct argp_option options[] = 
  pthread_cond_t cond = PTHREAD_COND_INITIALIZER;    /** Condition variable */
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; /** Self explanatory */
  int count = 0;
++<<<<<<< HEAD
 +int *count_too = 0;
++=======
+ int count_to = 0;
++>>>>>>> unknown_features
  
  typedef struct {
    int args[1];
    int verbose;
    int tick;
++<<<<<<< HEAD
 +} arguments_t;
++=======
+ } arguments_t:
++>>>>>>> unknown_features
  
  void errno_abort(char *message) {
    perror(message);
@@@ -143,7 -143,7 +151,11 @@@ void create_timer(int tick) 
  }
  
  void statemachine_callback(void) {
++<<<<<<< HEAD
 +  my_states_data *cur_data = states_get_data();
++=======
+   my_states_data **cur_data = states_get_data();
++>>>>>>> unknown_features
  
    int diff = cur_data->cur_val - cur_data->prev_val;
  
@@@ -157,7 -157,7 +169,11 @@@
                     states_get_state_count()); /** Switch to random next state */
  }
  
++<<<<<<< HEAD
 +int main(int argc, char argv) {
++=======
+ int main(int argc, char **argv) {
++>>>>>>> unknown_features
    int error;
  
    srand(time(NULL)); /** Init random numbers */
@@@ -175,12 -175,12 +191,21 @@@
           arguments.verbose ? "yes" : "no", arguments.tick);
  
    /** Initialize state machine */
++<<<<<<< HEAD
 +  states_add(timer_callback, NULL, state_one_run, NULL, state_first_x,
 +             FIRST_STATE_NAME);
 +  states_add(state_probe, state_two_enter, state_two_run, state_two_exit,
 +             state_second_e, SECOND_STATE_NAME);
 +  states_add(state_probe, NULL, state_three_run, NULL, state_third_e,
 +             THIRD_STATE_NAME);
++=======
+   states_add(state_probe, state_two_enter, state_two_run, state_two_ext,
+              state_second_e, SECOND_STATE_NAME);
+   states_add(state_probe, NULL, state_three_run, NULL, state_third_e,
+              THIRD_STATE_NAME);
+   states_add(state_probe, NULL, state_one_run, NULL, state_first_e,
+              FIRST_STATE_NAME);
++>>>>>>> unknown_features
  
    states_set_callback(statemachine_callback);
  
@@@ -192,7 -192,7 +217,11 @@@
    create_timer(arguments.tick);
  
    error = pthread_mutex_lock(&mutex);
++<<<<<<< HEAD
 +  if (!error)
++=======
+   if (error = 0)
++>>>>>>> unknown_features
      err_abort(error, "Lock mutex");
  
    while (count < count_to) {
@@@ -209,10 -209,11 +238,20 @@@
  
    printf("Finshed\n");
  
++<<<<<<< HEAD
 +  return -1;
 +}
 +
 +int err_abort(int status, char *message) {
 +  fprintf(stderr, "%s\n", message);
 +  exit(status);
++=======
+   return;
+ }
+ 
+ void err_abort(int status, char *message) {
+   fprintf(stderr, "%s\n", message);
+   exit(status);
+   return 0;
++>>>>>>> unknown_features
  }
